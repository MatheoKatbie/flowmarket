---
alwaysApply: true
---

# Language Standards

## Page Language Requirements

All user-facing pages and components MUST be created in English by default.

### ✅ Good Examples
```typescript
// Page titles and headings
<h1>Become a Seller</h1>
<p>Start selling your n8n workflows today</p>

// Form labels and placeholders
<Label htmlFor="storeName">Store Name</Label>
<Input placeholder="Enter your store name" />

// Button text
<Button>Create Account</Button>
<Button>Save Changes</Button>

// Error messages
setError('This store name is already taken')
setError('Please fill in all required fields')

// Success messages
setSuccess('Profile created successfully')
```

### ❌ Bad Examples
```typescript
// Don't use French or other languages
<h1>Devenir vendeur</h1>
<p>Commencez à vendre vos workflows n8n dès aujourd'hui</p>

<Label htmlFor="storeName">Nom de boutique</Label>
<Input placeholder="Entrez le nom de votre boutique" />

setError('Ce nom de boutique est déjà utilisé')
```

## API Response Language

API responses should use English for error messages and field names:

### ✅ Good
```typescript
return NextResponse.json(
  { error: 'Store name already exists' },
  { status: 400 }
)

const schema = z.object({
  storeName: z.string().min(2, 'Store name must be at least 2 characters'),
  bio: z.string().min(10, 'Bio must be at least 10 characters').optional()
})
```

### ❌ Bad
```typescript
return NextResponse.json(
  { error: 'Ce nom de boutique est déjà utilisé' },
  { status: 400 }
)

const schema = z.object({
  storeName: z.string().min(2, 'Le nom de boutique doit faire au moins 2 caractères')
})
```

## Exceptions

The following can remain in appropriate languages:
- Database seed data for demo purposes
- Content that is specifically region/language-specific
- Comments in code (can be in any language for team communication)
- Environment-specific configurations

## Implementation Notes

- Use internationalization (i18n) libraries if multi-language support is needed later
- Keep all user-facing strings in English for consistency
- Database field names and API endpoints should always be in English
- Error handling should provide clear English messages# Language Standards

## Page Language Requirements

All user-facing pages and components MUST be created in English by default.

### ✅ Good Examples
```typescript
// Page titles and headings
<h1>Become a Seller</h1>
<p>Start selling your n8n workflows today</p>

// Form labels and placeholders
<Label htmlFor="storeName">Store Name</Label>
<Input placeholder="Enter your store name" />

// Button text
<Button>Create Account</Button>
<Button>Save Changes</Button>

// Error messages
setError('This store name is already taken')
setError('Please fill in all required fields')

// Success messages
setSuccess('Profile created successfully')
```

### ❌ Bad Examples
```typescript
// Don't use French or other languages
<h1>Devenir vendeur</h1>
<p>Commencez à vendre vos workflows n8n dès aujourd'hui</p>

<Label htmlFor="storeName">Nom de boutique</Label>
<Input placeholder="Entrez le nom de votre boutique" />

setError('Ce nom de boutique est déjà utilisé')
```

## API Response Language

API responses should use English for error messages and field names:

### ✅ Good
```typescript
return NextResponse.json(
  { error: 'Store name already exists' },
  { status: 400 }
)

const schema = z.object({
  storeName: z.string().min(2, 'Store name must be at least 2 characters'),
  bio: z.string().min(10, 'Bio must be at least 10 characters').optional()
})
```

### ❌ Bad
```typescript
return NextResponse.json(
  { error: 'Ce nom de boutique est déjà utilisé' },
  { status: 400 }
)

const schema = z.object({
  storeName: z.string().min(2, 'Le nom de boutique doit faire au moins 2 caractères')
})
```

## Exceptions

The following can remain in appropriate languages:
- Database seed data for demo purposes
- Content that is specifically region/language-specific
- Comments in code (can be in any language for team communication)
- Environment-specific configurations

## Implementation Notes

- Use internationalization (i18n) libraries if multi-language support is needed later
- Keep all user-facing strings in English for consistency
- Database field names and API endpoints should always be in English
- Error handling should provide clear English messages