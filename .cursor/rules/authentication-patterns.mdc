---
description: Authentication patterns and Supabase integration for FlowMarket
globs: **/auth/**,**/hooks/useAuth*,**/middleware*
---

# Authentication Patterns

FlowMarket uses Supabase Authentication with a custom AuthProvider pattern for state management.

## Core Authentication Files

- [src/hooks/useAuth.tsx](mdc:src/hooks/useAuth.tsx) - Main auth context and provider
- [src/lib/supabase.ts](mdc:src/lib/supabase.ts) - Browser Supabase client
- [src/lib/supabase-server.ts](mdc:src/lib/supabase-server.ts) - Server Supabase client
- [src/middleware.ts](mdc:src/middleware.ts) - Route protection middleware
- [src/types/auth.ts](mdc:src/types/auth.ts) - Authentication types

## Authentication Flow

### 1. AuthProvider Setup
The app is wrapped with AuthProvider in [src/app/layout.tsx](mdc:src/app/layout.tsx):

```typescript
import { AuthProvider } from "@/hooks/useAuth"

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <AuthProvider>
          {children}
        </AuthProvider>
      </body>
    </html>
  )
}
```

### 2. Using Authentication
Always use the `useAuth` hook for auth state:

```typescript
'use client'
import { useAuth } from '@/hooks/useAuth'

export default function MyComponent() {
  const { user, loading, signIn, signOut } = useAuth()
  
  if (loading) return <div>Loading...</div>
  if (!user) return <div>Please sign in</div>
  
  return <div>Welcome, {user.displayName}</div>
}
```

### 3. Authentication Methods

**Sign In:**
```typescript
const handleSignIn = async (data: LoginFormData) => {
  const { error } = await signIn(data)
  if (error) {
    console.error('Sign in failed:', error)
  }
}
```

**Sign Up:**
```typescript
const handleSignUp = async (data: RegisterFormData) => {
  const { error } = await signUp(data)
  if (error) {
    console.error('Sign up failed:', error)
  }
}
```

**OAuth Providers:**
```typescript
const handleOAuthSignIn = async (provider: AuthProvider) => {
  const { error } = await signInWithProvider(provider)
  if (error) {
    console.error('OAuth sign in failed:', error)
  }
}
```

## Route Protection

### Middleware Configuration
The [src/middleware.ts](mdc:src/middleware.ts) automatically protects routes:

```typescript
// Public routes (no auth required)
const publicRoutes = [
  '/auth/login',
  '/auth/register', 
  '/auth/callback',
  '/auth/reset-password',
  '/',
]

// All other routes require authentication
```

### Protected Route Pattern
For pages requiring auth, the middleware automatically redirects to login.

### Optional Auth Pages
For pages where auth is optional, check user state:

```typescript
export default function OptionalAuthPage() {
  const { user, loading } = useAuth()
  
  return (
    <div>
      {loading ? (
        <div>Loading...</div>
      ) : user ? (
        <div>Authenticated content for {user.displayName}</div>
      ) : (
        <div>Public content with sign-in option</div>
      )}
    </div>
  )
}
```

## Server-Side Authentication

For API routes and server components:

```typescript
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function getServerSession() {
  const cookieStore = cookies()
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
      },
    }
  )
  
  const { data: { session } } = await supabase.auth.getSession()
  return session
}
```

## User Types

Always use the `AuthUser` type from [src/types/auth.ts](mdc:src/types/auth.ts):

```typescript
import type { AuthUser, LoginFormData, RegisterFormData } from '@/types/auth'

// AuthUser includes:
// - id, email, name, avatar_url
// - isSeller, isAdmin (role flags)
// - displayName (computed field)
// - createdAt, updatedAt
```

## Error Handling

Authentication errors should be handled gracefully:

```typescript
const { user, error, loading } = useAuth()

// Display auth errors
if (error) {
  return <div className="text-red-500">Authentication Error: {error}</div>
}

// Handle loading states
if (loading) {
  return <div className="animate-pulse">Authenticating...</div>
}
```

## Environment Variables

Required Supabase environment variables:
- `NEXT_PUBLIC_SUPABASE_URL`
- `NEXT_PUBLIC_SUPABASE_ANON_KEY`

These are validated in [src/lib/supabase.ts](mdc:src/lib/supabase.ts) with helpful error messages.