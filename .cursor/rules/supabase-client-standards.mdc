# Supabase Client Standards

## Client Usage Rules

Always use the appropriate Supabase client for your context. Never create new Supabase clients directly.

## Browser Client (Client Components)

Use `@/lib/supabase.ts` for all client-side operations:

### ✅ Good
```typescript
'use client'
import { supabase } from '@/lib/supabase'

export default function MyComponent() {
  const handleSignIn = async () => {
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password
    })
  }
}
```

### ❌ Bad
```typescript
'use client'
import { createClient } from '@supabase/supabase-js'

// Don't create new clients
const supabase = createClient(url, key)
```

## Server Client (API Routes & Server Components)

Use `@/lib/supabase-server.ts` for all server-side operations:

### ✅ Good
```typescript
// API Routes
import { createClient } from '@/lib/supabase-server'

export async function GET() {
  const supabase = await createClient()
  const { data: { session } } = await supabase.auth.getSession()
  
  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }
  
  // Continue with authenticated logic
}

// Server Components
import { createClient } from '@/lib/supabase-server'

export default async function ServerPage() {
  const supabase = await createClient()
  const { data } = await supabase.from('users').select('*')
  
  return <div>{/* render data */}</div>
}
```

### ❌ Bad
```typescript
// Don't create server clients manually
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

const supabase = createServerClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  {
    cookies: {
      get(name: string) {
        return cookies().get(name)?.value
      },
    },
  }
)
```

## Admin Client

Use `createAdminClient()` from `@/lib/supabase-server.ts` only when you need service role access:

### ✅ Good
```typescript
import { createAdminClient } from '@/lib/supabase-server'

export async function POST() {
  const supabaseAdmin = await createAdminClient()
  
  // Only use for admin operations that require service role
  const { data } = await supabaseAdmin.auth.admin.createUser({
    email,
    password
  })
}
```

## Authentication Patterns

### Client-Side Auth State
```typescript
'use client'
import { useAuth } from '@/hooks/useAuth'

export default function MyComponent() {
  const { user, loading, signIn, signOut } = useAuth()
  
  if (loading) return <div>Loading...</div>
  if (!user) return <div>Please sign in</div>
  
  return <div>Welcome, {user.displayName}</div>
}
```

### Server-Side Auth Check
```typescript
import { createClient } from '@/lib/supabase-server'

async function getServerSession() {
  const supabase = await createClient()
  const { data: { session } } = await supabase.auth.getSession()
  return session
}

export async function GET() {
  const session = await getServerSession()
  
  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }
  
  // Authenticated logic here
}
```

## File Locations

- **Browser Client**: `src/lib/supabase.ts`
- **Server Client**: `src/lib/supabase-server.ts`
- **Auth Hook**: `src/hooks/useAuth.tsx`
- **Auth Types**: `src/types/auth.ts`

## Environment Variables

Required environment variables (validated in supabase clients):
- `NEXT_PUBLIC_SUPABASE_URL`
- `NEXT_PUBLIC_SUPABASE_ANON_KEY`
- `SUPABASE_SERVICE_ROLE_KEY` (for admin operations only)

## Error Handling

Always handle Supabase errors gracefully:

```typescript
const { data, error } = await supabase.auth.signInWithPassword({
  email,
  password
})

if (error) {
  console.error('Auth error:', error.message)
  setError(error.message)
  return
}

// Success case
console.log('User signed in:', data.user)
```