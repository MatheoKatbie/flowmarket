---
globs: *.ts,*.tsx
description: TypeScript coding standards and conventions for FlowMarket
---

# TypeScript Standards

## Import Standards

Always use path aliases for internal imports:
```typescript
// ✅ Good
import { Button } from '@/components/ui/button'
import { useAuth } from '@/hooks/useAuth'
import { supabase } from '@/lib/supabase'

// ❌ Bad
import { Button } from '../../../components/ui/button'
import { useAuth } from '../../hooks/useAuth'
```

## Type Definitions

1. **Always export types** from [src/types/](mdc:src/types/) directory
2. **Use interfaces for object shapes**, types for unions/primitives
3. **Import types explicitly** with `import type` when only used for typing

```typescript
// ✅ Good
import type { AuthUser, LoginFormData } from '@/types/auth'
import { useState } from 'react'

// ❌ Bad
import { AuthUser, LoginFormData } from '@/types/auth'
```

## Component Standards

### Client Components
Always use `'use client'` directive when needed:
```typescript
'use client'

import { useState, useEffect } from 'react'
import { useAuth } from '@/hooks/useAuth'
```

### Props Interface
Define props interface for all components:
```typescript
interface MyComponentProps {
  title: string
  isOptional?: boolean
  children: React.ReactNode
}

export default function MyComponent({ title, isOptional, children }: MyComponentProps) {
  // component logic
}
```

### Event Handlers
Use specific event types:
```typescript
const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
  e.preventDefault()
  // handle form
}

const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
  // handle click
}
```

## API Route Standards

Use proper typing for API routes:
```typescript
import { NextRequest, NextResponse } from 'next/server'
import type { AuthUser } from '@/types/auth'

export async function GET(req: NextRequest) {
  try {
    // API logic
    return NextResponse.json({ success: true })
  } catch (error) {
    return NextResponse.json({ error: 'Something went wrong' }, { status: 500 })
  }
}
```

## Database Types

Use Prisma-generated types:
```typescript
import type { User, Workflow, Order } from '@prisma/client'

// For relations, use Prisma's include types
import type { Prisma } from '@prisma/client'
type UserWithProfile = Prisma.UserGetPayload<{
  include: { sellerProfile: true }
}>
```

## Error Handling

Always type error states properly:
```typescript
const [error, setError] = useState<string | null>(null)

// For API responses
interface ApiResponse<T> {
  data?: T
  error?: string
  success: boolean
}
```

## Async/Await Patterns

Use proper async typing:
```typescript
const fetchUser = async (id: string): Promise<AuthUser | null> => {
  try {
    const response = await fetch(`/api/user/${id}`)
    if (!response.ok) return null
    return await response.json()
  } catch {
    return null
  }
}
```