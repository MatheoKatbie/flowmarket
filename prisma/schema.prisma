generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * ============================
 * Enums
 * ============================
 */
enum WorkflowStatus {
  draft
  published
  unlisted
  disabled
  pack_only
}

enum ReviewStatus {
  published
  hidden
  reported
}

enum OrderStatus {
  pending
  paid
  failed
  refunded
  cancelled
}

enum PaymentStatus {
  succeeded
  failed
  refunded
  partial_refund
}

enum SellerProfileStatus {
  active
  suspended
  pending
}

enum PayoutStatus {
  pending
  paid
  failed
}

enum ReportStatus {
  open
  reviewing
  resolved
  dismissed
}

enum CompatibilityStatus {
  compatible
  unknown
  incompatible
}

enum Platform {
  n8n
  zapier
  make
  airtable_script
}

/**
 * ============================
 * Users & Sellers
 * ============================
 */
model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  passwordHash String? // Peut Ãªtre null pour les utilisateurs OAuth
  displayName  String
  avatarUrl    String?
  isSeller     Boolean  @default(false)
  isAdmin      Boolean  @default(false)
  stripeCustomerId String? // Stripe Customer ID for saved payment methods
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sellerProfile          SellerProfile?
  workflows              Workflow[]
  orders                 Order[]
  reviews                Review[]
  favorites              Favorite[]
  payouts                Payout[]
  auditLogs              AuditLog[]
  reports                Report[]                @relation("UserReports")
  resolvedReports        Report[]                @relation("UserResolvedReports")
  reviewHelpfulVotes     ReviewHelpfulVote[]
  workflowPacks          WorkflowPack[]
  packReviews            PackReview[]
  packFavorites          PackFavorite[]
  packReports            PackReport[]            @relation("UserPackReports")
  packReviewHelpfulVotes PackReviewHelpfulVote[]
  carts                  Cart[]

  @@index([email])
}

model SellerProfile {
  userId       String              @id @db.Uuid
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName    String              @unique
  slug         String              @unique
  bio          String?
  websiteUrl   String?
  supportEmail String?
  phoneNumber  String?
  countryCode  String?
  payoutMethod Json?
  status       SellerProfileStatus @default(active)

  // Stripe Connect fields
  stripeAccountId           String? // Stripe Connect account ID
  stripeOnboardingCompleted Boolean  @default(false)
  stripeOnboardingUrl       String? // URL for onboarding completion
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  reports Report[]
}

/**
 * ============================
 * Catalog: Workflows & Versions
 * ============================
 */
model Workflow {
  id               String         @id @default(uuid()) @db.Uuid
  sellerId         String         @db.Uuid
  seller           User           @relation(fields: [sellerId], references: [id], onDelete: Restrict)
  title            String
  slug             String         @unique
  shortDesc        String
  longDescMd       String?
  heroImageUrl     String?
  documentationUrl String? // URL vers le fichier de documentation (PDF, DOCX, etc.)
  platform         Platform? // Platform for the workflow (n8n, Zapier, Make, Airtable Script)
  status           WorkflowStatus @default(draft)
  basePriceCents   Int            @default(0)
  currency         String         @default("USD")
  salesCount       Int            @default(0)
  ratingAvg        Decimal        @default(0.0)
  ratingCount      Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  versions   WorkflowVersion[]
  categories WorkflowCategory[]
  tags       WorkflowTag[]
  plans      PricingPlan[]
  orderItems OrderItem[]
  reviews    Review[]
  favorites  Favorite[]
  compat     WorkflowCompatibility[]
  reports    Report[]
  packItems  WorkflowPackItem[]
  cartItems  CartItem[]

  @@index([status, updatedAt])
}

model WorkflowVersion {
  id            String   @id @default(uuid()) @db.Uuid
  workflowId    String   @db.Uuid
  workflow      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  semver        String
  changelogMd   String?
  n8nMinVersion String?
  n8nMaxVersion String?
  jsonFileUrl   String? // Optional, for uploaded files
  jsonContent   Json? // Direct JSON content storage
  extraAssets   Json?
  isLatest      Boolean  @default(false)
  createdAt     DateTime @default(now())

  @@unique([workflowId, semver])
  @@index([workflowId, isLatest])
}

/**
 * ============================
 * Categories & Tags
 * ============================
 */
model Category {
  id             String                 @id @default(uuid()) @db.Uuid
  name           String                 @unique
  slug           String                 @unique
  workflows      WorkflowCategory[]
  packCategories WorkflowPackCategory[]
}

model WorkflowCategory {
  workflowId String   @db.Uuid
  categoryId String   @db.Uuid
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([workflowId, categoryId])
}

model Tag {
  id              String            @id @default(uuid()) @db.Uuid
  name            String            @unique
  slug            String            @unique
  workflows       WorkflowTag[]
  WorkflowPackTag WorkflowPackTag[]
}

model WorkflowTag {
  workflowId String   @db.Uuid
  tagId      String   @db.Uuid
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([workflowId, tagId])
}

/**
 * ============================
 * Monetization (one-time only)
 * ============================
 */
model PricingPlan {
  id         String   @id @default(uuid()) @db.Uuid
  workflowId String   @db.Uuid
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  name       String // "Standard", "Pro", etc. (toujours one-time)
  priceCents Int
  currency   String   @default("EUR")
  features   String[] // puces marketing
  isActive   Boolean  @default(true)
  sortOrder  Int      @default(0)

  orderItems OrderItem[]
  cartItems  CartItem[]

  @@index([workflowId, isActive, sortOrder])
}

/**
 * ============================
 * Favorites (wishlist)
 * ============================
 */
model Favorite {
  userId     String   @db.Uuid
  workflowId String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([userId, workflowId])
}

/**
 * ============================
 * Orders & Payments (no licenses)
 * ============================
 */
model Order {
  id             String      @id @default(uuid()) @db.Uuid
  userId         String      @db.Uuid
  user           User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  status         OrderStatus
  totalCents     Int
  currency       String      @default("EUR")
  provider       String? // stripe, paypal...
  providerIntent String? // payment intent / session id
  metadata       Json? // Additional order metadata
  createdAt      DateTime    @default(now())
  paidAt         DateTime?

  items     OrderItem[]
  payments  Payment[]
  packItems PackOrderItem[]

  @@index([userId, status, createdAt])
}

model OrderItem {
  id             String  @id @default(uuid()) @db.Uuid
  orderId        String  @db.Uuid
  workflowId     String  @db.Uuid
  pricingPlanId  String? @db.Uuid
  unitPriceCents Int
  quantity       Int     @default(1)
  subtotalCents  Int

  order       Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  workflow    Workflow     @relation(fields: [workflowId], references: [id], onDelete: Restrict)
  pricingPlan PricingPlan? @relation(fields: [pricingPlanId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([workflowId])
}

model Payment {
  id             String        @id @default(uuid()) @db.Uuid
  orderId        String        @db.Uuid
  order          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  provider       String // stripe, paypal...
  providerCharge String
  amountCents    Int
  currency       String
  status         PaymentStatus
  processedAt    DateTime      @default(now())
  rawPayload     Json?
}

/**
 * ============================
 * Reviews (1 par acheteur - ownership required)
 * ============================
 */
model Review {
  id         String       @id @default(uuid()) @db.Uuid
  workflowId String       @db.Uuid
  userId     String       @db.Uuid
  rating     Int          @db.SmallInt // 1-5 stars
  title      String?      @db.VarChar(200)
  bodyMd     String?      @db.Text
  status     ReviewStatus @default(published)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Helpful votes from other users
  helpfulCount Int @default(0)

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Track helpful votes
  helpfulVotes ReviewHelpfulVote[]

  @@unique([workflowId, userId]) // one review per user per workflow
  @@index([workflowId, status, createdAt])
  @@index([rating, createdAt])
}

/**
 * ============================
 * Review Helpful Votes
 * ============================
 */
model ReviewHelpfulVote {
  id       String @id @default(uuid()) @db.Uuid
  reviewId String @db.Uuid
  userId   String @db.Uuid

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([reviewId, userId]) // one vote per user per review
  @@index([reviewId])
}

/**
 * ============================
 * Payouts (reversements vendeurs)
 * ============================
 */
model Payout {
  id            String       @id @default(uuid()) @db.Uuid
  sellerId      String       @db.Uuid
  seller        User         @relation(fields: [sellerId], references: [id], onDelete: Restrict)
  amountCents   Int
  currency      String       @default("EUR")
  periodStart   DateTime
  periodEnd     DateTime
  status        PayoutStatus
  providerBatch String?
  createdAt     DateTime     @default(now())
  paidAt        DateTime?

  @@index([sellerId, status, periodStart, periodEnd])
}

/**
 * ============================
 * Moderation & Audit
 * ============================
 */
model Report {
  id          String       @id @default(uuid()) @db.Uuid
  reporterId  String?      @db.Uuid
  workflowId  String?      @db.Uuid
  storeId     String?      @db.Uuid  // New field for store reports
  reason      String
  description String?      // Optional additional details
  status      ReportStatus @default(open)
  createdAt   DateTime     @default(now())
  resolvedAt  DateTime?
  resolvedBy  String?      @db.Uuid

  reporter  User?         @relation("UserReports", fields: [reporterId], references: [id], onDelete: SetNull)
  resolver  User?         @relation("UserResolvedReports", fields: [resolvedBy], references: [id], onDelete: SetNull)
  workflow  Workflow?     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  store     SellerProfile? @relation(fields: [storeId], references: [userId], onDelete: Cascade)

  @@index([workflowId, storeId, status, createdAt])
}

model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String?  @db.Uuid
  action     String // "workflow.publish", "order.refund", etc.
  entityType String // "workflow","order","user",...
  entityId   String?  @db.Uuid
  metadata   Json?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([entityType, entityId, createdAt])
}

/**
 * ============================
 * Compatibility (n8n)
 * ============================
 */
model WorkflowCompatibility {
  workflowId String              @db.Uuid
  n8nVersion String
  status     CompatibilityStatus

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@id([workflowId, n8nVersion])
}

/**
 * ============================
 * Workflow Packs
 * ============================
 */
model WorkflowPack {
  id             String         @id @default(uuid()) @db.Uuid
  sellerId       String         @db.Uuid
  seller         User           @relation(fields: [sellerId], references: [id], onDelete: Restrict)
  title          String
  slug           String         @unique
  shortDesc      String
  longDescMd     String?
  heroImageUrl   String?
  platform       Platform? // Primary platform for the pack
  status         WorkflowStatus @default(draft)
  basePriceCents Int            @default(0)
  currency       String         @default("EUR")
  salesCount     Int            @default(0)
  ratingAvg      Decimal        @default(0.0)
  ratingCount    Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  workflows  WorkflowPackItem[]
  categories WorkflowPackCategory[]
  tags       WorkflowPackTag[]
  plans      PackPricingPlan[]
  orderItems PackOrderItem[]
  reviews    PackReview[]
  favorites  PackFavorite[]
  Report     PackReport[]

  @@index([status, updatedAt])
}

model WorkflowPackItem {
  id         String   @id @default(uuid()) @db.Uuid
  packId     String   @db.Uuid
  workflowId String   @db.Uuid
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())

  pack     WorkflowPack @relation(fields: [packId], references: [id], onDelete: Cascade)
  workflow Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([packId, workflowId]) // Prevent duplicate workflows in same pack
  @@index([packId, sortOrder])
}

model WorkflowPackCategory {
  packId     String       @db.Uuid
  categoryId String       @db.Uuid
  pack       WorkflowPack @relation(fields: [packId], references: [id], onDelete: Cascade)
  category   Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([packId, categoryId])
}

model WorkflowPackTag {
  packId String       @db.Uuid
  tagId  String       @db.Uuid
  pack   WorkflowPack @relation(fields: [packId], references: [id], onDelete: Cascade)
  tag    Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([packId, tagId])
}

model PackPricingPlan {
  id         String       @id @default(uuid()) @db.Uuid
  packId     String       @db.Uuid
  pack       WorkflowPack @relation(fields: [packId], references: [id], onDelete: Cascade)
  name       String // "Standard", "Pro", etc.
  priceCents Int
  currency   String       @default("EUR")
  features   String[] // Marketing features list
  isActive   Boolean      @default(true)
  sortOrder  Int          @default(0)

  orderItems PackOrderItem[]

  @@index([packId, isActive, sortOrder])
}

model PackOrderItem {
  id             String  @id @default(uuid()) @db.Uuid
  orderId        String  @db.Uuid
  packId         String  @db.Uuid
  pricingPlanId  String? @db.Uuid
  unitPriceCents Int
  quantity       Int     @default(1)
  subtotalCents  Int

  order       Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  pack        WorkflowPack     @relation(fields: [packId], references: [id], onDelete: Restrict)
  pricingPlan PackPricingPlan? @relation(fields: [pricingPlanId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([packId])
}

model PackReview {
  id        String       @id @default(uuid()) @db.Uuid
  packId    String       @db.Uuid
  userId    String       @db.Uuid
  rating    Int          @db.SmallInt // 1-5 stars
  title     String?      @db.VarChar(200)
  bodyMd    String?      @db.Text
  status    ReviewStatus @default(published)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Helpful votes from other users
  helpfulCount Int @default(0)

  pack WorkflowPack @relation(fields: [packId], references: [id], onDelete: Cascade)
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Track helpful votes
  helpfulVotes PackReviewHelpfulVote[]

  @@unique([packId, userId]) // one review per user per pack
  @@index([packId, status, createdAt])
  @@index([rating, createdAt])
}

model PackReviewHelpfulVote {
  id       String @id @default(uuid()) @db.Uuid
  reviewId String @db.Uuid
  userId   String @db.Uuid

  review PackReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([reviewId, userId]) // one vote per user per review
  @@index([reviewId])
}

model PackFavorite {
  userId    String       @db.Uuid
  packId    String       @db.Uuid
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pack      WorkflowPack @relation(fields: [packId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())

  @@id([userId, packId])
}

model PackReport {
  id         String       @id @default(uuid()) @db.Uuid
  reporterId String?      @db.Uuid
  packId     String       @db.Uuid
  reason     String
  status     ReportStatus @default(open)
  createdAt  DateTime     @default(now())

  reporter User?        @relation("UserPackReports", fields: [reporterId], references: [id], onDelete: SetNull)
  pack     WorkflowPack @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@index([packId, status, createdAt])
}

/**
 * ============================
 * Shopping Cart
 * ============================
 */
model Cart {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]

  @@index([userId])
}

model CartItem {
  id            String  @id @default(uuid()) @db.Uuid
  cartId        String  @db.Uuid
  cart          Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  workflowId    String  @db.Uuid
  pricingPlanId String? @db.Uuid
  quantity      Int     @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  workflow    Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  pricingPlan PricingPlan? @relation(fields: [pricingPlanId], references: [id], onDelete: SetNull)

  @@index([cartId])
  @@index([cartId, workflowId])
}
